
package net.codejava.derbs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

public class LoginTest extends javax.swing.JFrame {

    /**
     * Creates new form LoginTest
     */
    public LoginTest() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setBackground(new java.awt.Color(255, 153, 0));
        jButton1.setText("Submit");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jTextField1.setText("Name");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setText("Password");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(138, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

        //on button click select data from the db that are equal to user input values, check if they exist. select name from users,
        //if not there, wrong cred
        
        System.out.println("clicked");
        String userName = jTextField1.getText();
        String password = jTextField2.getText();
        System.out.println(userName);
        System.out.println(password);

        String url = "jdbc:derby://localhost:1527/derby14";
        try{
            //initialise driver needed for conn
            Class.forName("org.apache.derby.jdbc.ClientDriver");
            //connect to database
            Connection conn = DriverManager.getConnection(url);
            System.out.println("connection successful");

            //create prep statement
            String sqlSelect = "SELECT * FROM users WHERE name = ?"; // select entire row data for user logging in, can do select name.... from etc isngle column
            PreparedStatement prep = conn.prepareStatement(sqlSelect,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            // Set the parameter value
            prep.setString(1, userName); // Change "John" to the desired name
            
            
            // returns a result 
            ResultSet resultSet = prep.executeQuery(); 
            
            //resultset starts before first row,.next makes
            
            // ok so next() have to keep calling for it to run over all rows
            // so while(resultSet.next) makes it keep calling, when it runs out of rows resultset returns false and loop exits.
            // in a general query without name search like im doing, it will return false if no more rows and true if cursor is on valid row
            
            // with a name search query, resultset might have many rows, but return false if search criteria(the name we want) isnt satisfied
            // 
            
            //check if doesnt meet search criteria i created 
            //might need a while loop here aswell, i need to make sure it runs through all db rows

            // preparedstatement query runs, doesnt meet criteria for search then its false, so this code checks did the query return false
            // if true, move cursor to beginning and get the password
            if(!resultSet.next()){
                System.out.println("that name does not exist in db, check your credentials or register");
            }else{
                resultSet.beforeFirst(); // move cursor back to before first row
            }
            // Process the results
            
            // dont i need a while loop here????? to run through all items, only working cause i currently have 1 row user
            
            //so summary 1. check if query criteria returns false, then dont search db 2. however,if true, check if any rows left in db
            // 3. since the query returned true, the name must be there somewhere, so dont run through all rows, just get row where name = to query
            // done
            
            // i think if(resultset.next) is saying,before first row, if there are any rows left, get * from the row where input name = db name
            if(resultSet.next()) {             
             if(resultSet.getString("NAME").equals(userName)){ // if resultSet.get(COLUMN NAME)                
                String pass = resultSet.getString("ID"); // get password                
                 System.out.println("password retrieved is: " + pass);
                 System.out.println("login successful");
            }
                // Retrieve the "name" column value from the result set
//                String name = resultSet.getString("NAME");
              
//                System.out.println("Name from database is " + name);


            //----------RETRIEVE HASHED PASS-------
            //  you must hash the users login input, then retrieve hash password on database
            // then compare them to see if they are the same. then login the user.
            
//            if hashed_user_input_password == stored_hashed_password:
//                print("Password Matched!")
//            else:
//             print("Password Incorrect!")
            }
          
            

        }catch(SQLException ex){
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        System.out.println(evt);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginTest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
